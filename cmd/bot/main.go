package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/gomarkdown/markdown/ast"
	"github.com/gomarkdown/markdown/md2"
	"github.com/gomarkdown/markdown/parser"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
type Config struct {
	BotToken string
	Offset   int
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Telegram
type Update struct {
	UpdateID int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Message struct {
	Chat Chat   `json:"chat"`
	Text string `json:"text"`
}

type Chat struct {
	ID int `json:"id"`
}

type SendMessageRequest struct {
	ChatID    int    `json:"chat_id"`
	Text      string `json:"text"`
	ParseMode string `json:"parse_mode"`
}

type ApiResponse struct {
	Ok     bool            `json:"ok"`
	Result json.RawMessage `json:"result"`
}

// GetUpdates –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç API Telegram
func GetUpdates(config *Config) ([]Update, error) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
	url := fmt.Sprintf("https://api.telegram.org/bot%s/getUpdates?offset=%d&timeout=60", config.BotToken, config.Offset)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	var apiResp ApiResponse
	if err := json.Unmarshal(body, &apiResp); err != nil {
		return nil, err
	}

	if !apiResp.Ok {
		return nil, fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: %s", string(body))
	}

	var updates []Update
	if err := json.Unmarshal(apiResp.Result, &updates); err != nil {
		return nil, err
	}

	return updates, nil
}

// SendMarkdownMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown V2
func SendMarkdownMessage(botToken string, chatID int, text string) error {
	// –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)

	// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
	reqData := SendMessageRequest{
		ChatID:    chatID,
		Text:      text,
		ParseMode: "MarkdownV2",
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
	reqBody, err := json.Marshal(reqData)
	if err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
	resp, err := http.Post(url, "application/json", strings.NewReader(string(reqBody)))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		return fmt.Errorf("API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d: %s", resp.StatusCode, string(body))
	}

	return nil
}

// Render –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ AST –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Markdown V2
func Render(doc ast.Node, renderer *md2.Renderer) []byte {
	var buf bytes.Buffer
	renderer.RenderHeader(&buf, doc)
	ast.WalkFunc(doc, func(node ast.Node, entering bool) ast.WalkStatus {
		return renderer.RenderNode(&buf, node, entering)
	})
	renderer.RenderFooter(&buf, doc)
	return buf.Bytes()
}

// –ü–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Markdown –≤ —Ñ–æ—Ä–º–∞—Ç Markdown V2 –¥–ª—è Telegram
func processMarkdownFile(filePath string, printAst bool) (string, error) {
	// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
	input, err := os.ReadFile(filePath)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", filePath, err)
	}

	// –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä Markdown —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
	extensions := parser.CommonExtensions | parser.AutoHeadingIDs | parser.NoEmptyLineBeforeBlock
	p := parser.NewWithExtensions(extensions)

	// –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
	doc := p.Parse(input)

	// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã–≤–æ–¥–∏–º AST –¥–µ—Ä–µ–≤–æ
	if printAst {
		fmt.Printf("--- AST tree –¥–ª—è —Ñ–∞–π–ª–∞ %s:\n", filePath)
		ast.Print(os.Stdout, doc)
		fmt.Print("\n")
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è Markdown V2
	renderer := md2.NewRenderer()

	// –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
	output := Render(doc, renderer)

	err = os.WriteFile("output.txt", output, os.ModePerm)
	if err != nil {
		log.Printf("output err: %s", err)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
	return string(output), nil
}

// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
func getTestFiles(testDirPath string) ([]string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	_, err := os.Stat(testDirPath)
	if os.IsNotExist(err) {
		return nil, fmt.Errorf("–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", testDirPath)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
	files, err := os.ReadDir(testDirPath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ %s: %v", testDirPath, err)
	}

	// –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
	var filePaths []string
	for _, file := range files {
		if !file.IsDir() && (strings.HasSuffix(file.Name(), ".md") || strings.HasSuffix(file.Name(), ".txt")) {
			filePaths = append(filePaths, filepath.Join(testDirPath, file.Name()))
		}
	}

	return filePaths, nil
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func sendAllTestFiles(botToken string, chatID int, testDirPath string, printAst bool) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
	filePaths, err := getTestFiles(testDirPath)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: %v", err)
		SendMarkdownMessage(botToken, chatID, escapeMarkdownV2(fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err)))
		return
	}

	// –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
	if len(filePaths) == 0 {
		SendMarkdownMessage(botToken, chatID, escapeMarkdownV2("–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
	for _, filePath := range filePaths {
		filename := filepath.Base(filePath)

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª Markdown
		outputMarkdown, err := processMarkdownFile(filePath, printAst)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ %s: %v", filename, err)
			SendMarkdownMessage(botToken, chatID, escapeMarkdownV2(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ %s: %v", filename, err)))
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ñ–∞–π–ª–∞
		SendMarkdownMessage(botToken, chatID, escapeMarkdownV2(fmt.Sprintf("üìÅ –§–∞–π–ª: %s", filename)))

		// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
		time.Sleep(500 * time.Millisecond)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
		err = SendMarkdownMessage(botToken, chatID, outputMarkdown)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ %s: %v", filename, err)
			SendMarkdownMessage(botToken, chatID, escapeMarkdownV2(fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ %s: %v", filename, err)))
		} else {
			log.Printf("–§–∞–π–ª %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç %d", filename, chatID)
		}

		// –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
		time.Sleep(1 * time.Second)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	SendMarkdownMessage(botToken, chatID, escapeMarkdownV2("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"))
}

// –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown V2
var specialChars = []string{
	"_", "*", "[", "]", "(", ")", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!",
}

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
func escapeMarkdownV2(text string) string {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
	result := text

	// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	for _, char := range specialChars {
		result = strings.ReplaceAll(result, char, "\\"+char)
	}

	return result
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Fatal("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
	}

	// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
	testDirPath := "./cmd/bot/tests"

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
	config := &Config{
		BotToken: botToken,
		Offset:   0,
	}

	fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

	// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	for {
		updates, err := GetUpdates(config)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
			time.Sleep(5 * time.Second)
			continue
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
		for _, update := range updates {
			// –û–±–Ω–æ–≤–ª—è–µ–º offset (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ)
			config.Offset = update.UpdateID + 1

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
			if update.Message.Text != "" {
				chatID := update.Message.Chat.ID
				messageText := update.Message.Text
				log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç chat_id %d: %s", chatID, messageText)

				// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /files
				if messageText == "/start" || messageText == "/files" {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
					SendMarkdownMessage(config.BotToken, chatID, escapeMarkdownV2("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ Markdown —Ñ–∞–π–ª—ã..."))

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
					sendAllTestFiles(config.BotToken, chatID, testDirPath, true)
				} else if strings.HasPrefix(messageText, "/file ") {
					// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
					fileName := strings.TrimPrefix(messageText, "/file ")
					filePath := filepath.Join(testDirPath, fileName)

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
					if _, err := os.Stat(filePath); os.IsNotExist(err) {
						SendMarkdownMessage(config.BotToken, chatID, escapeMarkdownV2(fmt.Sprintf("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω", fileName)))
						continue
					}

					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
					outputMarkdown, err := processMarkdownFile(filePath, true)
					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ %s: %v", fileName, err)
						SendMarkdownMessage(config.BotToken, chatID, escapeMarkdownV2(fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ %s: %v", fileName, err)))
						continue
					}

					SendMarkdownMessage(config.BotToken, chatID, escapeMarkdownV2(fmt.Sprintf("üìÅ –§–∞–π–ª: %s", fileName)))
					time.Sleep(500 * time.Millisecond)

					err = SendMarkdownMessage(config.BotToken, chatID, outputMarkdown)
					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ %s: %v", fileName, err)
						SendMarkdownMessage(config.BotToken, chatID, escapeMarkdownV2(fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ %s: %v", fileName, err)))
					} else {
						log.Printf("–§–∞–π–ª %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç %d", fileName, chatID)
					}
				} else if messageText == "/help" {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
					helpText := `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start –∏–ª–∏ /files - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
/file –∏–º—è_—Ñ–∞–π–ª–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
					`
					SendMarkdownMessage(config.BotToken, chatID, escapeMarkdownV2(helpText))
				} else {
					// –î–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ Markdown
					// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown V2
					p := parser.NewWithExtensions(parser.CommonExtensions)
					doc := p.Parse([]byte(messageText))
					renderer := md2.NewRenderer()
					output := Render(doc, renderer)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
					err := SendMarkdownMessage(config.BotToken, chatID, string(output))
					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
						SendMarkdownMessage(config.BotToken, chatID, escapeMarkdownV2(fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err)))
					}
				}
			}
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API)
		time.Sleep(1 * time.Second)
	}
}
